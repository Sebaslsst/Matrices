#include <stdio.h>

#define N 3 // Definir el tamaño de la matriz (matrices cuadradas)

// Función para imprimir la matriz
void printMatrix(float matrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%8.2f ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Función para calcular el determinante de una matriz 3x3
float determinant(float matrix[N][N]) {
    float det = 0;
    for (int i = 0; i < N; i++) {
        det += matrix[0][i] * (matrix[1][(i + 1) % 3] * matrix[2][(i + 2) % 3] - matrix[1][(i + 2) % 3] * matrix[2][(i + 1) % 3]);
    }
    return det;
}

// Función para calcular la inversa de una matriz 3x3
int inverse(float matrix[N][N], float inverseMatrix[N][N]) {
    float det = determinant(matrix);
    if (det == 0) {
        printf("La matriz no es invertible.\n");
        return 0;
    }

    // Calcular la matriz adjunta y luego multiplicar por 1/determinante
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            inverseMatrix[j][i] = ((matrix[(i + 1) % 3][(j + 1) % 3] * matrix[(i + 2) % 3][(j + 2) % 3]) - (matrix[(i + 1) % 3][(j + 2) % 3] * matrix[(i + 2) % 3][(j + 1) % 3])) / det;
        }
    }
    return 1;
}

// Función para multiplicar dos matrices
void multiplyMatrices(float firstMatrix[N][N], float secondMatrix[N][N], float resultMatrix[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            resultMatrix[i][j] = 0;
            for (int k = 0; k < N; k++) {
                resultMatrix[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
            }
        }
    }
}

int main() {
    // Matrices de entrada
    float A[N][N] = {
        {3, 2, -4},
        {2, 3, 3},
        {5, -3, 1}
    };

    float B[N][N] = {
        {1, 0, 2},
        {0, 1, -1},
        {2, -1, 1}
    };

    // Matrices para almacenar la inversa y el resultado
    float inverseB[N][N];
    float result[N][N];

    printf("Matriz A:\n");
    printMatrix(A);

    printf("\nMatriz B:\n");
    printMatrix(B);

    // Calcular la inversa de la matriz B
    if (inverse(B, inverseB)) {
        printf("\nInversa de la matriz B:\n");
        printMatrix(inverseB);

        // Multiplicar A por la inversa de B
        multiplyMatrices(A, inverseB, result);

        printf("\nResultado de la división de A por B (A * inv(B)):\n");
        printMatrix(result);
    }

    return 0;
}
