#include <stdio.h>

#define SIZE 3 // Tamaño de la matriz (matrices cuadradas)

// Función para imprimir la matriz
void printMatrix(int matrix[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            printf("%6d ", matrix[i][j]);
        }
        printf("\n");
    }
}

// Función para multiplicar dos matrices de tamaño SIZE x SIZE
void multiplyMatrices(int matrixA[SIZE][SIZE], int matrixB[SIZE][SIZE], int resultMatrix[SIZE][SIZE]) {
    int tempMatrix[SIZE][SIZE] = {0};

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            tempMatrix[i][j] = 0;
            for (int k = 0; k < SIZE; k++) {
                tempMatrix[i][j] += matrixA[i][k] * matrixB[k][j];
            }
        }
    }

    // Copiar el resultado temporal a resultMatrix
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            resultMatrix[i][j] = tempMatrix[i][j];
        }
    }
}

// Función para calcular la potencia de una matriz
void matrixPower(int matrix[SIZE][SIZE], int power, int resultMatrix[SIZE][SIZE]) {
    int tempMatrix[SIZE][SIZE];
    int identityMatrix[SIZE][SIZE] = {0}; // Matriz identidad

    // Inicializar la matriz identidad
    for (int i = 0; i < SIZE; i++) {
        identityMatrix[i][i] = 1;
    }

    // Copiar la matriz inicial a resultMatrix
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            resultMatrix[i][j] = matrix[i][j];
        }
    }

    if (power == 0) {
        // La matriz a la potencia 0 es la matriz identidad
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                resultMatrix[i][j] = identityMatrix[i][j];
            }
        }
        return;
    } else if (power == 1) {
        // La matriz a la potencia 1 es la misma matriz
        return;
    } else {
        // Multiplicar la matriz por sí misma (power - 1) veces
        for (int p = 1; p < power; p++) {
            multiplyMatrices(resultMatrix, matrix, tempMatrix);
            
            // Actualizar resultMatrix
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE; j++) {
                    resultMatrix[i][j] = tempMatrix[i][j];
                }
            }
        }
    }
}

int main() {
    int matrix[SIZE][SIZE] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    int power;
    int resultMatrix[SIZE][SIZE];

    printf("Matriz inicial:\n");
    printMatrix(matrix);

    // Solicitar la potencia deseada
    printf("\nIngrese la potencia a la que desea elevar la matriz: ");
    scanf("%d", &power);

    // Calcular la potencia de la matriz
    matrixPower(matrix, power, resultMatrix);

    printf("\nMatriz elevada a la potencia %d:\n", power);
    printMatrix(resultMatrix);

    return 0;
}

